#! /bin/bash
# 
# DownFile.sh
# Copyright (C) 2020  <wanghao@0000206327>
#
# Distributed under terms of the MIT license.
# # ===================> version: v0.2 更新内容如下<====================
# 脚本需要通过yum|apt下载软件，所以先自行update本地数据库
# 当前脚本会依赖ssh/scp expect
# 文件默认下载到当前执行目录
# 脚本修改为交互式，直接执行命令进入交换界面
# # ===================> version: v0.3 升级内容如下<====================
# 香港主机的临时下载目录从固定的/tmp到/tmp的随机目录,防止文件冲突
# 支持的下载文件从之前固定的文件地址增加到类似git clone https://github.com/vim/vim.git  这种方式
# 如果是以git方式下载,会增加压缩,回传的是在指定目录下的压缩包文件,缩短回传时间
# # ===================> version: v0.4 升级内容如下<====================
# 直接脚本直接调用和交互式切换,如果有传参,则直接调用,没有传参,则进入交互式
# 参数: 俩个参数
# param1: 文件下载路径(. 当前路径,获取其他自定义目录)
# parma2: 文件地址(https://xxx.xxx.tar.gz) 或者类似git clone https://github.com/vim/vim.git  
# # 如果是git协议下载,必须是https方式,如果是ssh方式因为涉及到上传公钥会导致下载失败,可以切换为https
# 范例: downloadFile . git clone https://github.com/wmsj100/study_shell.git (在当前目录会下载文件study_shell.tar.gz)
# # ===================> version: v0.5 升级内容如下<====================
# 1. 新增脚本升级功能，指定使用139.9.135.47主机的脚本为升级源
# 使用: downloadFile update
# 2. 新增版本打印功能
# 使用: downloadFile version
# 3. 新增帮助信息
# 使用: downloadFile help
# # ===================> version: v0.6 升级内容如下<====================
# bug: 修复当前docker没有安装which时的报错问题
# # ===================> version: v0.7 升级内容如下<====================
# add: 优化打印信息，添加颜色打印
# # ===================> version: v0.8 升级内容如下<====================
# bug: 修复downloadFile version/update生成临时文件
# bug: 修复对于软件包管理器的判断逻辑
# # ===================> version: v0.9 升级内容如下<====================
# add: 回传文件新增解压缩开关SwitchZip
# param: False 关闭自动解压缩，默认值
# param: True 开启自动解压缩，尝试识别压缩格式并自动去解压缩
# # ===================> version: v1.0 升级内容如下<====================
# update: 优化软件判断，减少界面输出
# # ===================> version: v1.0.1 升级内容如下<====================
# bug: 修复文件下载错误回传空包的问题,如果网址不存在，直接返回错误
# # ===================> version: v1.0.22 升级内容如下<====================
# update: 统一tar包和git库的下载方式，统一使用 downloadFile xxx.tar.gz/xxx.git
# # ===================> version: v1.0.3 升级内容如下<====================
# update: 优化下载文件的界面打印，只保留关键信息
# # ===================> version: v1.0.4 升级内容如下<====================
# update: 合并远程操作，减少交互次数，缩短下载时间
# # ===================> version: v1.0.5 升级内容如下<====================
# update: 优化界面警告信息
# # ===================> version: v1.0.6 升级内容如下<====================
# add: 新增checkSoInit方法，去checkSo目录给脚本添加可执行权限
# add: 在/usr/local/bin目录生成可执行文件checkSo
# use: checkSo ./jython-3.14.jar 在任意目标执行该方法即可，不需要先切换到checkSo所在目录在执行./main.sh /root/xxx.jython.jar
# # ===================> version: v1.0.7 升级内容如下<====================
# add: 新增checkSoCreate方法，用于在任意目录创建checkSo目录，并且更新/usr/local/bin/checkSo指向链接
# use: downloadFile checkSoCreate . #用于在当前目录创建checkSo，拉取139.9.135.47主机/root/checkSo.zip
# # ===================> version: v1.0.8 升级内容如下<====================
# update: checkSoCreate 改名为checkSoPull
# delete: checkSoInit功能整合到checkSoPull
# # ===================> version: v1.0.9 升级内容如下<====================
# update: 优化脚本参数输入判断，取消参数数量限制，只识别目标参数是否存在，默认第一个参数为下载路径
# # ===================> version: v1.1.0 升级内容如下<====================
# update: 重构关于checkSo的功能，优化checkSo分析结果界面打印，并给出文件路径
# # ===================> version: v1.1.1 升级内容如下<====================
# add: 添加push方法，只对开发维护人员
# # ===================> version: v1.1.2 升级内容如下<====================
# brief: 新增checkSoNew,checkSoNewAnalysis调用脚本自己的代码来分析目标文件是否包含非aarch64的文件
# add: checkSoNew 在/usr/local/bin目录生成checkSo脚本，具体调用执行的分析动作
# use: downloadFile checkSoNew ,该动作生成checkSo文件后，可以执行 checkSo xxx.jar来分析
# add: checkSoNewAnalysis xxx.jar 真正执行分析的调用，checkSo脚本也是调用这个方法实现分析
# show: 会在界面打印关于目标的信息，也会在当前目录生成一个目标文件的log xxx.jar.log
# # ===================> version: v1.1.3 升级内容如下<====================
# add: 新增对于日志文件的分析和界面呈现
# # ===================> version: v1.1.4 升级内容如下<====================
# bug: 修改来block和pipe文件的报错，添加对于目录的判断
# # ===================> version: v1.1.5 升级内容如下<====================
# update: 修改文件遍历从for修改为find
# # ===================> version: v1.1.6 升级内容如下<====================
# update: 添加黑名单过滤机制
# # ===================> version v1.1.7 升级内容如下<====================
# bug: 待修复，如果下载网址错误导致临时目录没有清理

# get file url
getURL(){
	CURDIR=$(pwd)

	while [ -z "$URL" ];do
		read -p "Input address https://XXX.tar.gz: " URL
	done

	getFileType
}

# get file suffix tar.gz|.git
getFileType(){
	File=${URL##*/}
	local suffix=${URL##*.}

	if [ "$suffix" = "git" ];then
		FileType=git
	elif [ "$suffix" = "svn" ];then
		FileType=svn
	elif [ -n "$suffix" ];then
		FileType=file
	else
		showError "$URL address is not a file or git, please check!!!"
		exit 1
	fi
}

# show success echo
showOK(){
	echo -e "\033[32m[SUCCESS] $@ \033[0m"
}

# show error echo
showError(){
	echo -e "\033[31m[ERROR] $@ \033[0m"
}

# show error echo
showPrint(){
	echo -e "\033[34m[INFO] $@ \033[0m"
}

# get download path
getDir(){
	tmp=""
	read -p "Default download path $CURDIR (Y/n) " tmp

	case "$tmp" in
		n*|N*) 
			tmp=""
			while [ -z "$tmp" ];do
				read -p "Please input download path " tmp
			done
			CURDIR="$tmp"
			;;
		*)
			CURDIR=$(pwd)
	esac
}

remoteCMD(){
	if [ "$FileType" = "file" ];then
		showPrint "Waiting to download $TMPDir/$File"
		expectShell "ssh $RemoteInfo \"mkdir -p $TMPDir;wget -nv $URL -O $TMPDir/$File\""
		checkExpectResultCode
		expectShell "scp $RemoteInfo:$TMPDir/$File $CURDIR"
		expectShell "ssh $RemoteInfo rm -rf $TMPDir"
	elif [ "$FileType" = "git" ];then
		remoteGitCmd
	elif [ "$FileType" = "svn" ];then
		remoteSvnCmd
	else
		showError "FileType must is file|git|svn"
		exit 1
	fi
}

# svn clone
remoteSvnCmd(){
	showError "svn not support, if need, please tell me!!!"
	exit 1
}

# check expect result code
checkExpectResultCode(){
	if [ $? -ne 0 ];then
		showError "$URL address is error, please check!!!"
		exit 1
	fi
}

# remote protocol is git
remoteGitCmd(){
	File=${File%.*}
	local tarFile=${File}.tar.gz
	expectShell "ssh $RemoteInfo \"mkdir -p $TMPDir/$File;git clone $URL $TMPDir/$File\""
	checkExpectResultCode
	expectShell "ssh $RemoteInfo \"cd $TMPDir;tar -zcf $tarFile $File\""
	expectShell "scp $RemoteInfo:$TMPDir/$tarFile $CURDIR"
	expectShell "ssh $RemoteInfo rm -rf $TMPDir"
	File=$tarFile
}

expectShell(){
expect <<EOF
	set timeout 3000
	spawn $@
	expect {
		"yes/no" { send "yes\n";exp_continue }
		"password" { send "$PASSWD\n" }
	}
	expect eof
	catch wait result
	exit [lindex \$result 3]
EOF
}

checkCmd(){
	command -v $1 &>/dev/null
	if [ $? -eq 0 ];then
		return 0
	else
		return 1
	fi
}

# environment prepare
envPre(){
	local CMD=""
	# 判断包管理器工具,可以自己随意添加
	TMPDir=$(mktemp)
	CURDIR=$(realpath $CURDIR) 

	checkCmd yum && CMD="yum"
	checkCmd apt && CMD="apt"

	if [ -z "$CMD" ];then
		showError "You pkg manager is not support"
		exit 1
	fi

	# 判断当前登录用户
	if [ $(whoami) != "root" ];then
		CMD="sudo $CMD"
	fi
	
	showPrint "Checking relay software..."
	checkCmd ssh || $CMD install -q -y openssh-clients
	checkCmd expect || $CMD install -q -y expect
	checkCmd file || $CMD install -q -y file
	checkCmd unzip || $CMD install -q -y unzip
	checkCmd bzip2 || $CMD install -q -y bzip2
	checkCmd gzip || $CMD install -q -y gzip
	checkCmd xz || $CMD install -q -y xz
	checkCmd cpio || $CMD install -q -y cpio
	checkCmd rpm2cpio || $CMD install -q -y rpm2cpio
}

# print env
printEnv(){
	showPrint $URL
	showPrint $File
	showPrint $CURDIR
}

# try compress file
compressFile(){
	local filePath=$1
	local curdir=${filePath%/*}
	local file=${filePath##*/}
	local suffix=${file##*.}
	local fileType=$(file $CURDIR/$File | awk -F ' ' '{print $2}')
	local fileDir=""

	# filter jar file
	if [ "$suffix" = "jar" ];then
		showPrint "Current download file $file is jar"
		exit 0
	fi

	echo $fileType | grep -w -E "^gzip|XZ|POSIX|bzip2$" &>/dev/null
	if [ $? -eq 0 ];then
		fileDir=$(tar -tf $file | head -n 1)
		tar -xf $file -C $curdir
		showOK "Target dir $curdir/$fileDir unzip ok!!!"
	elif [ "$fileType" = "Zip" ];then
		fileDir=$(unzip -l $file | head -n 10  | tail -n 1 | awk -F ' ' '{print $NF}' | awk -F '/' '{print $1}')
		unzip -oq -d $curdir $file
		showOK "Target dir $curdir/$fileDir unzip ok!!!"
	else
		showPrint "$file can't unzip please check"
	fi
}

# cur host cmd like clean tmp file
curHostCMD(){
	rm -rf $TMPDir
	showOK "$CURDIR/$File download complete!!!"

	# try unzip file
	if [ "$SwitchZip" = "True" ];then
		showPrint "Try to unzip $File"
		compressFile $CURDIR/$File
	fi
}

# direct use,just use like downloadFile xxx.tar.gz .
judgeDealType(){
	if [ "$#" -lt 2 ];then
		showError "Please input params like downloadFile /tmp xxx.tar.gz"
		exit 1
	fi

	CURDIR=$(realpath $1)
	URL=$2
	
	if [ ! -d "$CURDIR" ];then
		showError "Your current Path is $CURDIR,Please inpur correct path for download file"
		exit 1
	fi

	getFileType
	automaticCmd
}

# interaction type,need input address and download path
interactionShell(){
	getURL
	getDir
	automaticCmd
}

automaticCmd(){
	#printEnv
	envPre
	remoteCMD 
	curHostCMD
}

# update downloadFile
updateShell(){
	local remoteInfo=root@${StandHost}
	expectShell "scp $remoteInfo:/usr/local/bin/downloadFile /usr/local/bin/"
	showOK "downloadFile update!!!"
}

showHelpInfo(){
	showPrint "downloadFile command info:"
	showPrint "# get tar file to current dir"
	showOK "downloadFile . https://xxx.xxx.tar.gz"
	showPrint "# get tar file to other dir"
	showOK "downloadFile /tmp/aa/bb https://xxx.xxx.tar.gz"
	showPrint "# get git project and compress to project_name.tar.gz to current dir"
	showOK "downloadFile . git clone https://xxx.xxx.git"
	showPrint "# access into interaction shell"
	showPrint "# you should input address for file or git project and download dir"
	showPrint "# default download dir is current dir,you can press 'Enter' key"
	showOK "downloadFile"
	showPrint "# update downloadFile shell"
	showOK "downloadFile update"
	showPrint "# show version of shell"
	showOK "downloadFile version"
}

# check shell exec
checkExecute(){
	local path=$1
	local curShell=""

	if [ -z "$path" ];then
		showError "Please check checkExecute params"
		exit 1
	fi

	for curShell in $(find $path -maxdepth 1 -type f -name "*.sh");do
		if [ ! -x "$curShell" ];then
			showPrint "$curShell is not executable,already modify it!"
			chmod +x "$curShell"
		fi
	done
}

# modify shell absolute path
createCheckSoShell(){
	local checkSoFile=/usr/local/bin/checkSo
	echo -E "#!/bin/bash
downloadFile checkSoAnalysis \$@
" >"$checkSoFile"

	if [ ! -x "$checkSoFile" ];then
		chmod +x "$checkSoFile"
	fi
}

# create checkSo dir,use checkSo code to analysis target
checkSoPull(){
	local targetPath=$(realpath $1)
	local checkSoZipPath=$targetPath/checkSo.zip
	local checkSoPath=${checkSoZipPath%.*}
	checkExist $targetPath

	expectShell "scp ${StandHost}:/root/checkSo.zip $targetPath"
	checkExpectResultCode
	unzip -oq -d $targetPath $checkSoZipPath
	rm -f $checkSoZipPath
	showOK "$checkSoPath already ok!!!"
	checkExecute $checkSoPath
	createCheckSoShell $checkSoPath
	sed -i "s|^CheckSoGlobalPath=.*|CheckSoGlobalPath=${checkSoPath}|g" /usr/local/bin/downloadFile
}

# check dir exist
checkExist(){
	local target=$(realpath $1)

	if [ ! -e "$target" ];then
		showError "$target is not exist,please check!!!"
		exit 1
	fi
}

# create checkSo to /usr/local/bin, use downloadFile to analysis code
createNewCheckSoShell(){
	local checkSoFile=/usr/local/bin/checkSo
	echo -E "#!/bin/bash
downloadFile checkSoNewAnalysis \$@
" >"$checkSoFile"

	if [ ! -x "$checkSoFile" ];then
		chmod +x "$checkSoFile"
	fi
	showOK "$checkSoFile ok,you can use checkSo to analysis file!!!"
}

# analysis tar/jar/rpm
checkSoNewAnalysis(){
	local targetPath=$(realpath $1)
	local soResult=${CheckSoTmpPath}/soResult.log
	checkExist $targetPath
	rm -rf $CheckSoTmpPath
	mkdir -p $CheckSoTmpPath
	cp -rf $targetPath $CheckSoTmpPath # copy file to tmp
	showPrint "Starting analysis $targetPath,Please wait!!!"
	checkTargetFileFromTmp $CheckSoTmpPath
	if [ -f "$soResult" ];then
		cp $soResult ${targetPath}.log
		showOK "${targetPath}.log Please check!!!"
	else
		showOK "$targetPath is OK XD!!!"
	fi
}

# unzip file
unzipFileToDir(){
	local unzipType=$1
	local filePath=$2
	local unzipPath="${filePath}-unpack"
	local curPath=$(pwd)
	local suffix=${filePath##*.}

	mkdir -p $unzipPath

	if [ "$unzipType" = "tar" ];then
		showPrint "Unpack $filePath"
		tar -xf $filePath -C $unzipPath 2>/dev/null
		rm -f $filePath # unzip file and delete zip file
		checkTargetFileFromTmp $unzipPath
	elif [ "$unzipType" = "Zip" ];then
		showPrint "Unpack $filePath"
		if [ "$suffix" = "jar" ];then
			unzip -oq -d $unzipPath $filePath *.so 2>/dev/null
		else
			unzip -oq -d $unzipPath $filePath 2>/dev/null
		fi
		rm -f $filePath
		checkTargetFileFromTmp $unzipPath
	elif [ "$unzipType" = "RPM" ];then
		showPrint "Unpack $filePath"
		cd $unzipPath
		rpm2cpio $filePath | cpio -idm 2>/dev/null
		cd $curPath
		rm -f $filePath
		checkTargetFileFromTmp $unzipPath
	elif [ -z "$unzipType" ];then
		showError "Please input param like tar/zip/rpm"
		exit 1
	else
		showPrint "$filePath don't need check"
	fi
}

# check file is aarch64
checkSoFile(){
	local filePath=$1
	local machine=$(readelf -h $filePath | grep -w Machine | awk -F ' ' '{print $NF}')
	echo $machine | grep -iw "$DefaultPlatform" &>/dev/null
	if [ $? -ne 0 ];then
		showError "${filePath} is $machine"  
		echo "$filePath ==> $machine" >> $CheckSoTmpPath/soResult.log
	fi
}

# judge file is target for checkSo
judgeFileForCheckSo(){
	local filePath=$1
	local fileType=$(file $filePath | awk -F ' ' '{print $2}')
	local suffix=${filePath##*.}

	echo $fileType | grep -w -E "^gzip|XZ|POSIX|bzip2$" &>/dev/null
	if [ $? -eq 0 ];then
		if [ "$fileType" = "POSIX" ];then
			fileType=$(file $filePath | awk -F ' ' '{print $3}')
			if [ "$fileType" = "tar" ];then
				unzipFileToDir "tar" $filePath
			fi
		else
			unzipFileToDir "tar" $filePath
		fi
	elif [ "$fileType" = "Zip" ];then
		unzipFileToDir "Zip" $filePath
	elif [ "$fileType" = "RPM" ];then
		unzipFileToDir "RPM" $filePath
	elif [ "$fileType" = "ELF" ];then
		checkSoFile $filePath
	fi
}

# copy dir or file to temp
checkTargetFileFromTmp(){
	local targetPath=$1
	local file=""
	local fileList=""
	local skipDotDir="git|github|svn"
	local skipDotSuffix="py|PY|pyc|pyw|derived|decTest|ht|sh|txt|whl|yml|xml|png|gif|jgp|jpeg|svg|woff|woff2|json|ico|pem|log|java|html|css|js|ts|bat|exe|c|md|doc|egg-info|class|jsp|properties|MF"
	local skipSuffix="NOTICE|LICENSE|DEPENDENCIES|README"

	if [ -f "$targetPath" ];then
#		echo "scan $targetPath"
		judgeFileForCheckSo $targetPath
	elif [ -d "$targetPath" ];then
		fileList=$(find $targetPath -type f | egrep -wv "\.($skipDotDir)" | egrep -v "\.($skipDotSuffix)$" | egrep -v "(${skipSuffix})$")
		if [ -n "$fileList" ];then
			for file in $fileList
			do
				checkTargetFileFromTmp $file
			done
		fi
	fi
}

checkSoAnalysis(){
	local targetFile=$(realpath $1)
	checkExist $targetFile

	if [ ! -d "$CheckSoGlobalPath" ];then
		showError "$CheckSoGlobalPath is not exist, Please check"
		exit 1
	fi

	cd $CheckSoGlobalPath

	for file in $JarLogName $OutLogName $NonJarLogName
	do
		echo "" > $file
	done

	./main.sh $targetFile
	checkSoLog $targetFile
}

checkSoLog(){
	local targetFile=$1
	local targetDir=${targetFile%/*}
	local log=${targetFile}.log
	local nonJarLog=""
	local outLog=""
	local jarLog=""

	[ -f "$log" ] && rm "$log"
	cd $CheckSoGlobalPath

	nonJarLog=$(cat $NonJarLogName | grep -Ev "^$|UTC|CST|2020$" 2>/dev/null)
	if [ -n "$nonJarLog" ];then
		echo -E "$CheckSoGlobalPath/$NonJarLogName ==> $nonJarLog" >> $log
		showError "$nonJarLog Check $CheckSoGlobalPath/$NonJarLogName"
	fi

	outLog=$(cat $OutLogName | grep -Ev "^$" 2>/dev/null)
	if [ -n "$outLog" ];then
		echo -E "$CheckSoGlobalPath/$OutLogName ==> $outLog" >> $log
		showError "$outLog Check $CheckSoGlobalPath/$OutLogName"
	fi

	jarLog=$(cat $JarLogName | grep -Ev "^$" 2>/dev/null)
	if [ -n "$jarLog" ];then
		echo -E "$CheckSoGlobalPath/$JarLogName ==> $jarLog" >> $log
		showError "$jarLog Check $CheckSoGlobalPath/$JarLogName"
	fi

	if [ -f "$log" ];then
		showPrint "Detail log $log"
	else
		showOK "$targetFile is OK XD!!!"
	fi
}

# push downloadFile to remote host 139.9.135.47
# just use for developer,Please think more
pushDownloadFileToRemoteHost(){
	local remoteInfo=root@${StandHost}
	showPrint "This will force cover remote host file use local host"
	expectShell "scp /usr/local/bin/downloadFile $remoteInfo:/usr/local/bin/downloadFile" 
	checkExpectResultCode
	showOK "Push downloadFile ok!!!"
}

init(){
	if [ "$#" -gt 0 ];then
		# if param is update
		if [ "$1" = "update" ];then
			updateShell
		elif [ "$1" = "version" ];then
			version=$(grep -nr "^#\s.*version:" /usr/local/bin/downloadFile | tail -n 1 | awk -F ' ' '{print $4$5}')
			if [ -z "$version" ];then
				showError "Please use 'downloadFile update' to upgrade shell and try again"
				exit 1
			else
				showOK $version
			fi
		elif [ "$1" = "help" ];then
			showHelpInfo
		elif [ "$1" = "push" ];then
			pushDownloadFileToRemoteHost
		elif [ "$1" = "checkSoPull" ];then
			checkSoPull $2
		elif [ "$1" = "checkSoAnalysis" ];then
			checkSoAnalysis $2
		elif [ "$1" = "checkSoNew" ];then
			createNewCheckSoShell
		elif [ "$1" = "checkSoNewAnalysis" ];then
			checkSoNewAnalysis $2
		else
			judgeDealType $@
		fi
	else
		interactionShell
	fi
}

# Global params end 
RemoteIP=159.138.0.217
RemoteUser=root
RemoteInfo=${RemoteUser}@${RemoteIP}
TMPDir="" # remoteHost tmp dir
PASSWD=CloudBU@123
URL="" # address for download file
CURDIR="" # download file dir
File="" # download file name
FileType="file" # params is file|git
SwitchZip="False" # False: just download File; True: download and try unzip file
StandHost=139.9.135.47

## checkSo Global params
# CheckSoGlobalPath is cur host checkSo path, when use checkSoPull chang is
CheckSoGlobalPath=/opt/checkSo
CheckSoTmpPath=/tmp/CheckSo-unpack/ # unzip file to here
DefaultPlatform="AArch64" # target compile platform is aarch64
JarLogName="JarResult.log"
OutLogName="out.csv"
NonJarLogName="NonJarResult.log"
## checkSo Global params end

# Global params end 

init $@
