# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
#HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
#HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    PS1='${debian_chroot:+($debian_chroot)}\u:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export python=/home/ubuntu/Github/LinuxTree/Languages/Python/Notes
export mysql=/home/ubuntu/Github/LinuxTree/Languages/MySQL/Notes
export diary=/home/ubuntu/Github/MyDream/Diary/2020/March
export code_python=/home/ubuntu/Github/python_study
export linux=/home/ubuntu/Github/LinuxTree/Linux/Notes
export active=/home/ubuntu/Code/Python/virtual/py3env/bin/activate
export PATH=$PATH:/home/ubuntu/Tools:/home/ubuntu/supervisord
export shell=/home/ubuntu/Github/LinuxTree/Languages/Shell/Note
export FLASK_ENV=development
export NODE_HOME=/home/ubuntu/Software/node_12_15
export node=/home/ubuntu/Github/LinuxTree/Languages/NodeJS/Notes
export myblog=/home/ubuntu/Github/python_study/flask/myblog
export npm_package_path=/usr/local/lib/node_modules
export vue=/home/ubuntu/Github/LinuxTree/Languages/WebUI/Frame/Vue/Notes
# Install Ruby Gems to ~/gems
export GEM_HOME="$HOME/gems"
export PATH="$HOME/gems/bin:$PATH"
export es6=/home/ubuntu/Github/LinuxTree/Languages/WebUI/Frame/ES6/Notes
export django=/home/ubuntu/Github/LinuxTree/Languages/Python/Frame/Django/Notes
alias superv='supervisorctl -c /home/ubuntu/supervisord/supervisord.conf'
alias restartmyweb='superv restart myweb'
export vue_study=/home/ubuntu/Github/python_study/website/vue_study
export typescript=/home/ubuntu/Github/python_study/website/typescript
export study6=/home/ubuntu/Github/python_study/django/study6
export code_angular=/home/ubuntu/Github/python_study/website/angular
export code_less=/home/ubuntu/Github/python_study/website/less
export code_hexo=/home/ubuntu/Code/Website/hexoBlog
export oss=/home/ubuntu/Github/LinuxTree/Linux/CloudServer/OSS/Notes
export languages=/home/ubuntu/Github/LinuxTree/Languages
source $active
export layui=/home/ubuntu/Github/LinuxTree/Languages/WebUI/Frame/layui/Notes
export webui=/home/ubuntu/Github/LinuxTree/Languages/WebUI
export myweb=/home/ubuntu/Code/myweb
export docker=/home/ubuntu/Github/LinuxTree/Languages/Docker/Notes
